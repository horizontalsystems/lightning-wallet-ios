//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Lnrpc_WalletUnlockerServiceClient, then call methods of this protocol to make API calls.
public protocol Lnrpc_WalletUnlockerService {
  func genSeed(_ request: Lnrpc_GenSeedRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GenSeedRequest, Lnrpc_GenSeedResponse>
  func initWallet(_ request: Lnrpc_InitWalletRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_InitWalletRequest, Lnrpc_InitWalletResponse>
  func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_UnlockWalletRequest, Lnrpc_UnlockWalletResponse>
  func changePassword(_ request: Lnrpc_ChangePasswordRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChangePasswordRequest, Lnrpc_ChangePasswordResponse>
}

public final class Lnrpc_WalletUnlockerServiceClient: GRPCClient, Lnrpc_WalletUnlockerService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the lnrpc.WalletUnlocker service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GenSeed.
  ///
  /// - Parameters:
  ///   - request: Request to send to GenSeed.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func genSeed(_ request: Lnrpc_GenSeedRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GenSeedRequest, Lnrpc_GenSeedResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/GenSeed",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to InitWallet.
  ///
  /// - Parameters:
  ///   - request: Request to send to InitWallet.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func initWallet(_ request: Lnrpc_InitWalletRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_InitWalletRequest, Lnrpc_InitWalletResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/InitWallet",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UnlockWallet.
  ///
  /// - Parameters:
  ///   - request: Request to send to UnlockWallet.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func unlockWallet(_ request: Lnrpc_UnlockWalletRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_UnlockWalletRequest, Lnrpc_UnlockWalletResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/UnlockWallet",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ChangePassword.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangePassword.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func changePassword(_ request: Lnrpc_ChangePasswordRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChangePasswordRequest, Lnrpc_ChangePasswordResponse> {
    return self.makeUnaryCall(path: "/lnrpc.WalletUnlocker/ChangePassword",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// Usage: instantiate Lnrpc_LightningServiceClient, then call methods of this protocol to make API calls.
public protocol Lnrpc_LightningService {
  func walletBalance(_ request: Lnrpc_WalletBalanceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_WalletBalanceRequest, Lnrpc_WalletBalanceResponse>
  func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChannelBalanceRequest, Lnrpc_ChannelBalanceResponse>
  func getTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GetTransactionsRequest, Lnrpc_TransactionDetails>
  func estimateFee(_ request: Lnrpc_EstimateFeeRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_EstimateFeeRequest, Lnrpc_EstimateFeeResponse>
  func sendCoins(_ request: Lnrpc_SendCoinsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendCoinsRequest, Lnrpc_SendCoinsResponse>
  func listUnspent(_ request: Lnrpc_ListUnspentRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListUnspentRequest, Lnrpc_ListUnspentResponse>
  func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_Transaction) -> Void) -> ServerStreamingCall<Lnrpc_GetTransactionsRequest, Lnrpc_Transaction>
  func sendMany(_ request: Lnrpc_SendManyRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendManyRequest, Lnrpc_SendManyResponse>
  func newAddress(_ request: Lnrpc_NewAddressRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NewAddressRequest, Lnrpc_NewAddressResponse>
  func signMessage(_ request: Lnrpc_SignMessageRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SignMessageRequest, Lnrpc_SignMessageResponse>
  func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_VerifyMessageRequest, Lnrpc_VerifyMessageResponse>
  func connectPeer(_ request: Lnrpc_ConnectPeerRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ConnectPeerRequest, Lnrpc_ConnectPeerResponse>
  func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DisconnectPeerRequest, Lnrpc_DisconnectPeerResponse>
  func listPeers(_ request: Lnrpc_ListPeersRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListPeersRequest, Lnrpc_ListPeersResponse>
  func subscribePeerEvents(_ request: Lnrpc_PeerEventSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_PeerEvent) -> Void) -> ServerStreamingCall<Lnrpc_PeerEventSubscription, Lnrpc_PeerEvent>
  func getInfo(_ request: Lnrpc_GetInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_GetInfoRequest, Lnrpc_GetInfoResponse>
  func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PendingChannelsRequest, Lnrpc_PendingChannelsResponse>
  func listChannels(_ request: Lnrpc_ListChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListChannelsRequest, Lnrpc_ListChannelsResponse>
  func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_ChannelEventUpdate) -> Void) -> ServerStreamingCall<Lnrpc_ChannelEventSubscription, Lnrpc_ChannelEventUpdate>
  func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ClosedChannelsRequest, Lnrpc_ClosedChannelsResponse>
  func openChannelSync(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_OpenChannelRequest, Lnrpc_ChannelPoint>
  func openChannel(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_OpenStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_OpenChannelRequest, Lnrpc_OpenStatusUpdate>
  func fundingStateStep(_ request: Lnrpc_FundingTransitionMsg, callOptions: CallOptions?) -> UnaryCall<Lnrpc_FundingTransitionMsg, Lnrpc_FundingStateStepResp>
  func channelAcceptor(callOptions: CallOptions?, handler: @escaping (Lnrpc_ChannelAcceptRequest) -> Void) -> BidirectionalStreamingCall<Lnrpc_ChannelAcceptResponse, Lnrpc_ChannelAcceptRequest>
  func closeChannel(_ request: Lnrpc_CloseChannelRequest, callOptions: CallOptions?, handler: @escaping (Lnrpc_CloseStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_CloseChannelRequest, Lnrpc_CloseStatusUpdate>
  func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_AbandonChannelRequest, Lnrpc_AbandonChannelResponse>
  func sendPayment(callOptions: CallOptions?, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendRequest, Lnrpc_SendResponse>
  func sendPaymentSync(_ request: Lnrpc_SendRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendRequest, Lnrpc_SendResponse>
  func sendToRoute(callOptions: CallOptions?, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse>
  func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse>
  func addInvoice(_ request: Lnrpc_Invoice, callOptions: CallOptions?) -> UnaryCall<Lnrpc_Invoice, Lnrpc_AddInvoiceResponse>
  func listInvoices(_ request: Lnrpc_ListInvoiceRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListInvoiceRequest, Lnrpc_ListInvoiceResponse>
  func lookupInvoice(_ request: Lnrpc_PaymentHash, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PaymentHash, Lnrpc_Invoice>
  func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_Invoice) -> Void) -> ServerStreamingCall<Lnrpc_InvoiceSubscription, Lnrpc_Invoice>
  func decodePayReq(_ request: Lnrpc_PayReqString, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PayReqString, Lnrpc_PayReq>
  func listPayments(_ request: Lnrpc_ListPaymentsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ListPaymentsRequest, Lnrpc_ListPaymentsResponse>
  func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DeleteAllPaymentsRequest, Lnrpc_DeleteAllPaymentsResponse>
  func describeGraph(_ request: Lnrpc_ChannelGraphRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChannelGraphRequest, Lnrpc_ChannelGraph>
  func getChanInfo(_ request: Lnrpc_ChanInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanInfoRequest, Lnrpc_ChannelEdge>
  func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NodeInfoRequest, Lnrpc_NodeInfo>
  func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_QueryRoutesRequest, Lnrpc_QueryRoutesResponse>
  func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_NetworkInfoRequest, Lnrpc_NetworkInfo>
  func stopDaemon(_ request: Lnrpc_StopRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_StopRequest, Lnrpc_StopResponse>
  func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_GraphTopologyUpdate) -> Void) -> ServerStreamingCall<Lnrpc_GraphTopologySubscription, Lnrpc_GraphTopologyUpdate>
  func debugLevel(_ request: Lnrpc_DebugLevelRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_DebugLevelRequest, Lnrpc_DebugLevelResponse>
  func feeReport(_ request: Lnrpc_FeeReportRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_FeeReportRequest, Lnrpc_FeeReportResponse>
  func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_PolicyUpdateRequest, Lnrpc_PolicyUpdateResponse>
  func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ForwardingHistoryRequest, Lnrpc_ForwardingHistoryResponse>
  func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ExportChannelBackupRequest, Lnrpc_ChannelBackup>
  func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanBackupExportRequest, Lnrpc_ChanBackupSnapshot>
  func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, callOptions: CallOptions?) -> UnaryCall<Lnrpc_ChanBackupSnapshot, Lnrpc_VerifyChanBackupResponse>
  func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_RestoreChanBackupRequest, Lnrpc_RestoreBackupResponse>
  func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, callOptions: CallOptions?, handler: @escaping (Lnrpc_ChanBackupSnapshot) -> Void) -> ServerStreamingCall<Lnrpc_ChannelBackupSubscription, Lnrpc_ChanBackupSnapshot>
  func bakeMacaroon(_ request: Lnrpc_BakeMacaroonRequest, callOptions: CallOptions?) -> UnaryCall<Lnrpc_BakeMacaroonRequest, Lnrpc_BakeMacaroonResponse>
}

public final class Lnrpc_LightningServiceClient: GRPCClient, Lnrpc_LightningService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the lnrpc.Lightning service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to WalletBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to WalletBalance.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func walletBalance(_ request: Lnrpc_WalletBalanceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_WalletBalanceRequest, Lnrpc_WalletBalanceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/WalletBalance",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ChannelBalance.
  ///
  /// - Parameters:
  ///   - request: Request to send to ChannelBalance.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func channelBalance(_ request: Lnrpc_ChannelBalanceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChannelBalanceRequest, Lnrpc_ChannelBalanceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ChannelBalance",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetTransactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTransactions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GetTransactionsRequest, Lnrpc_TransactionDetails> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetTransactions",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to EstimateFee.
  ///
  /// - Parameters:
  ///   - request: Request to send to EstimateFee.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func estimateFee(_ request: Lnrpc_EstimateFeeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_EstimateFeeRequest, Lnrpc_EstimateFeeResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/EstimateFee",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SendCoins.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendCoins.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendCoins(_ request: Lnrpc_SendCoinsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendCoinsRequest, Lnrpc_SendCoinsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendCoins",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListUnspent.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUnspent.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listUnspent(_ request: Lnrpc_ListUnspentRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListUnspentRequest, Lnrpc_ListUnspentResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListUnspent",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeTransactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeTransactions.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeTransactions(_ request: Lnrpc_GetTransactionsRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_Transaction) -> Void) -> ServerStreamingCall<Lnrpc_GetTransactionsRequest, Lnrpc_Transaction> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeTransactions",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to SendMany.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendMany.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendMany(_ request: Lnrpc_SendManyRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendManyRequest, Lnrpc_SendManyResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendMany",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to NewAddress.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewAddress.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func newAddress(_ request: Lnrpc_NewAddressRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NewAddressRequest, Lnrpc_NewAddressResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/NewAddress",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to SignMessage.
  ///
  /// - Parameters:
  ///   - request: Request to send to SignMessage.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func signMessage(_ request: Lnrpc_SignMessageRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SignMessageRequest, Lnrpc_SignMessageResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SignMessage",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to VerifyMessage.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyMessage.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyMessage(_ request: Lnrpc_VerifyMessageRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_VerifyMessageRequest, Lnrpc_VerifyMessageResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/VerifyMessage",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ConnectPeer.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConnectPeer.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func connectPeer(_ request: Lnrpc_ConnectPeerRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ConnectPeerRequest, Lnrpc_ConnectPeerResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ConnectPeer",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DisconnectPeer.
  ///
  /// - Parameters:
  ///   - request: Request to send to DisconnectPeer.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func disconnectPeer(_ request: Lnrpc_DisconnectPeerRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DisconnectPeerRequest, Lnrpc_DisconnectPeerResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DisconnectPeer",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListPeers.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPeers.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPeers(_ request: Lnrpc_ListPeersRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListPeersRequest, Lnrpc_ListPeersResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListPeers",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribePeerEvents.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribePeerEvents.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribePeerEvents(_ request: Lnrpc_PeerEventSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_PeerEvent) -> Void) -> ServerStreamingCall<Lnrpc_PeerEventSubscription, Lnrpc_PeerEvent> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribePeerEvents",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to GetInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getInfo(_ request: Lnrpc_GetInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_GetInfoRequest, Lnrpc_GetInfoResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to PendingChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to PendingChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func pendingChannels(_ request: Lnrpc_PendingChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PendingChannelsRequest, Lnrpc_PendingChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/PendingChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listChannels(_ request: Lnrpc_ListChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListChannelsRequest, Lnrpc_ListChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelEvents.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelEvents.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeChannelEvents(_ request: Lnrpc_ChannelEventSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChannelEventUpdate) -> Void) -> ServerStreamingCall<Lnrpc_ChannelEventSubscription, Lnrpc_ChannelEventUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelEvents",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to ClosedChannels.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClosedChannels.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func closedChannels(_ request: Lnrpc_ClosedChannelsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ClosedChannelsRequest, Lnrpc_ClosedChannelsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ClosedChannels",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to OpenChannelSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChannelSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func openChannelSync(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_OpenChannelRequest, Lnrpc_ChannelPoint> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/OpenChannelSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to OpenChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to OpenChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func openChannel(_ request: Lnrpc_OpenChannelRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_OpenStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_OpenChannelRequest, Lnrpc_OpenStatusUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/OpenChannel",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to FundingStateStep.
  ///
  /// - Parameters:
  ///   - request: Request to send to FundingStateStep.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func fundingStateStep(_ request: Lnrpc_FundingTransitionMsg, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_FundingTransitionMsg, Lnrpc_FundingStateStepResp> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/FundingStateStep",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to ChannelAcceptor.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func channelAcceptor(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChannelAcceptRequest) -> Void) -> BidirectionalStreamingCall<Lnrpc_ChannelAcceptResponse, Lnrpc_ChannelAcceptRequest> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/ChannelAcceptor",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous server-streaming call to CloseChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to CloseChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func closeChannel(_ request: Lnrpc_CloseChannelRequest, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_CloseStatusUpdate) -> Void) -> ServerStreamingCall<Lnrpc_CloseChannelRequest, Lnrpc_CloseStatusUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/CloseChannel",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to AbandonChannel.
  ///
  /// - Parameters:
  ///   - request: Request to send to AbandonChannel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func abandonChannel(_ request: Lnrpc_AbandonChannelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_AbandonChannelRequest, Lnrpc_AbandonChannelResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/AbandonChannel",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to SendPayment.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func sendPayment(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendRequest, Lnrpc_SendResponse> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/SendPayment",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous unary call to SendPaymentSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendPaymentSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendPaymentSync(_ request: Lnrpc_SendRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendRequest, Lnrpc_SendResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendPaymentSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to SendToRoute.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func sendToRoute(callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_SendResponse) -> Void) -> BidirectionalStreamingCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse> {
    return self.makeBidirectionalStreamingCall(path: "/lnrpc.Lightning/SendToRoute",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Asynchronous unary call to SendToRouteSync.
  ///
  /// - Parameters:
  ///   - request: Request to send to SendToRouteSync.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sendToRouteSync(_ request: Lnrpc_SendToRouteRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_SendToRouteRequest, Lnrpc_SendResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/SendToRouteSync",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to AddInvoice.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddInvoice.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addInvoice(_ request: Lnrpc_Invoice, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_Invoice, Lnrpc_AddInvoiceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/AddInvoice",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListInvoices.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListInvoices.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listInvoices(_ request: Lnrpc_ListInvoiceRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListInvoiceRequest, Lnrpc_ListInvoiceResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListInvoices",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to LookupInvoice.
  ///
  /// - Parameters:
  ///   - request: Request to send to LookupInvoice.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func lookupInvoice(_ request: Lnrpc_PaymentHash, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PaymentHash, Lnrpc_Invoice> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/LookupInvoice",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeInvoices.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeInvoices.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeInvoices(_ request: Lnrpc_InvoiceSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_Invoice) -> Void) -> ServerStreamingCall<Lnrpc_InvoiceSubscription, Lnrpc_Invoice> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeInvoices",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to DecodePayReq.
  ///
  /// - Parameters:
  ///   - request: Request to send to DecodePayReq.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func decodePayReq(_ request: Lnrpc_PayReqString, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PayReqString, Lnrpc_PayReq> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DecodePayReq",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ListPayments.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListPayments.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listPayments(_ request: Lnrpc_ListPaymentsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ListPaymentsRequest, Lnrpc_ListPaymentsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ListPayments",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteAllPayments.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteAllPayments.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteAllPayments(_ request: Lnrpc_DeleteAllPaymentsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DeleteAllPaymentsRequest, Lnrpc_DeleteAllPaymentsResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DeleteAllPayments",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DescribeGraph.
  ///
  /// - Parameters:
  ///   - request: Request to send to DescribeGraph.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func describeGraph(_ request: Lnrpc_ChannelGraphRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChannelGraphRequest, Lnrpc_ChannelGraph> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DescribeGraph",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetChanInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetChanInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getChanInfo(_ request: Lnrpc_ChanInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanInfoRequest, Lnrpc_ChannelEdge> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetChanInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetNodeInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNodeInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNodeInfo(_ request: Lnrpc_NodeInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NodeInfoRequest, Lnrpc_NodeInfo> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetNodeInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to QueryRoutes.
  ///
  /// - Parameters:
  ///   - request: Request to send to QueryRoutes.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func queryRoutes(_ request: Lnrpc_QueryRoutesRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_QueryRoutesRequest, Lnrpc_QueryRoutesResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/QueryRoutes",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetNetworkInfo.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetNetworkInfo.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getNetworkInfo(_ request: Lnrpc_NetworkInfoRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_NetworkInfoRequest, Lnrpc_NetworkInfo> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/GetNetworkInfo",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to StopDaemon.
  ///
  /// - Parameters:
  ///   - request: Request to send to StopDaemon.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func stopDaemon(_ request: Lnrpc_StopRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_StopRequest, Lnrpc_StopResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/StopDaemon",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelGraph.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelGraph.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeChannelGraph(_ request: Lnrpc_GraphTopologySubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_GraphTopologyUpdate) -> Void) -> ServerStreamingCall<Lnrpc_GraphTopologySubscription, Lnrpc_GraphTopologyUpdate> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelGraph",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to DebugLevel.
  ///
  /// - Parameters:
  ///   - request: Request to send to DebugLevel.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func debugLevel(_ request: Lnrpc_DebugLevelRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_DebugLevelRequest, Lnrpc_DebugLevelResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/DebugLevel",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to FeeReport.
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeReport.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func feeReport(_ request: Lnrpc_FeeReportRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_FeeReportRequest, Lnrpc_FeeReportResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/FeeReport",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to UpdateChannelPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateChannelPolicy.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateChannelPolicy(_ request: Lnrpc_PolicyUpdateRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_PolicyUpdateRequest, Lnrpc_PolicyUpdateResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/UpdateChannelPolicy",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ForwardingHistory.
  ///
  /// - Parameters:
  ///   - request: Request to send to ForwardingHistory.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func forwardingHistory(_ request: Lnrpc_ForwardingHistoryRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ForwardingHistoryRequest, Lnrpc_ForwardingHistoryResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ForwardingHistory",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ExportChannelBackup.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportChannelBackup.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportChannelBackup(_ request: Lnrpc_ExportChannelBackupRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ExportChannelBackupRequest, Lnrpc_ChannelBackup> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ExportChannelBackup",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to ExportAllChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to ExportAllChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func exportAllChannelBackups(_ request: Lnrpc_ChanBackupExportRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanBackupExportRequest, Lnrpc_ChanBackupSnapshot> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/ExportAllChannelBackups",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to VerifyChanBackup.
  ///
  /// - Parameters:
  ///   - request: Request to send to VerifyChanBackup.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func verifyChanBackup(_ request: Lnrpc_ChanBackupSnapshot, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_ChanBackupSnapshot, Lnrpc_VerifyChanBackupResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/VerifyChanBackup",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to RestoreChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to RestoreChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func restoreChannelBackups(_ request: Lnrpc_RestoreChanBackupRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_RestoreChanBackupRequest, Lnrpc_RestoreBackupResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/RestoreChannelBackups",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to SubscribeChannelBackups.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubscribeChannelBackups.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func subscribeChannelBackups(_ request: Lnrpc_ChannelBackupSubscription, callOptions: CallOptions? = nil, handler: @escaping (Lnrpc_ChanBackupSnapshot) -> Void) -> ServerStreamingCall<Lnrpc_ChannelBackupSubscription, Lnrpc_ChanBackupSnapshot> {
    return self.makeServerStreamingCall(path: "/lnrpc.Lightning/SubscribeChannelBackups",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous unary call to BakeMacaroon.
  ///
  /// - Parameters:
  ///   - request: Request to send to BakeMacaroon.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func bakeMacaroon(_ request: Lnrpc_BakeMacaroonRequest, callOptions: CallOptions? = nil) -> UnaryCall<Lnrpc_BakeMacaroonRequest, Lnrpc_BakeMacaroonResponse> {
    return self.makeUnaryCall(path: "/lnrpc.Lightning/BakeMacaroon",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Lnrpc_WalletUnlockerProvider: CallHandlerProvider {
  func genSeed(request: Lnrpc_GenSeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_GenSeedResponse>
  func initWallet(request: Lnrpc_InitWalletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_InitWalletResponse>
  func unlockWallet(request: Lnrpc_UnlockWalletRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_UnlockWalletResponse>
  func changePassword(request: Lnrpc_ChangePasswordRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChangePasswordResponse>
}

extension Lnrpc_WalletUnlockerProvider {
  public var serviceName: String { return "lnrpc.WalletUnlocker" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GenSeed":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.genSeed(request: request, context: context)
        }
      }

    case "InitWallet":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.initWallet(request: request, context: context)
        }
      }

    case "UnlockWallet":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.unlockWallet(request: request, context: context)
        }
      }

    case "ChangePassword":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.changePassword(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Lnrpc_LightningProvider: CallHandlerProvider {
  func walletBalance(request: Lnrpc_WalletBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_WalletBalanceResponse>
  func channelBalance(request: Lnrpc_ChannelBalanceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChannelBalanceResponse>
  func getTransactions(request: Lnrpc_GetTransactionsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_TransactionDetails>
  func estimateFee(request: Lnrpc_EstimateFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_EstimateFeeResponse>
  func sendCoins(request: Lnrpc_SendCoinsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_SendCoinsResponse>
  func listUnspent(request: Lnrpc_ListUnspentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ListUnspentResponse>
  func subscribeTransactions(request: Lnrpc_GetTransactionsRequest, context: StreamingResponseCallContext<Lnrpc_Transaction>) -> EventLoopFuture<GRPCStatus>
  func sendMany(request: Lnrpc_SendManyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_SendManyResponse>
  func newAddress(request: Lnrpc_NewAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_NewAddressResponse>
  func signMessage(request: Lnrpc_SignMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_SignMessageResponse>
  func verifyMessage(request: Lnrpc_VerifyMessageRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_VerifyMessageResponse>
  func connectPeer(request: Lnrpc_ConnectPeerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ConnectPeerResponse>
  func disconnectPeer(request: Lnrpc_DisconnectPeerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_DisconnectPeerResponse>
  func listPeers(request: Lnrpc_ListPeersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ListPeersResponse>
  func subscribePeerEvents(request: Lnrpc_PeerEventSubscription, context: StreamingResponseCallContext<Lnrpc_PeerEvent>) -> EventLoopFuture<GRPCStatus>
  func getInfo(request: Lnrpc_GetInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_GetInfoResponse>
  func pendingChannels(request: Lnrpc_PendingChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_PendingChannelsResponse>
  func listChannels(request: Lnrpc_ListChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ListChannelsResponse>
  func subscribeChannelEvents(request: Lnrpc_ChannelEventSubscription, context: StreamingResponseCallContext<Lnrpc_ChannelEventUpdate>) -> EventLoopFuture<GRPCStatus>
  func closedChannels(request: Lnrpc_ClosedChannelsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ClosedChannelsResponse>
  func openChannelSync(request: Lnrpc_OpenChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChannelPoint>
  func openChannel(request: Lnrpc_OpenChannelRequest, context: StreamingResponseCallContext<Lnrpc_OpenStatusUpdate>) -> EventLoopFuture<GRPCStatus>
  func fundingStateStep(request: Lnrpc_FundingTransitionMsg, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_FundingStateStepResp>
  func channelAcceptor(context: StreamingResponseCallContext<Lnrpc_ChannelAcceptRequest>) -> EventLoopFuture<(StreamEvent<Lnrpc_ChannelAcceptResponse>) -> Void>
  func closeChannel(request: Lnrpc_CloseChannelRequest, context: StreamingResponseCallContext<Lnrpc_CloseStatusUpdate>) -> EventLoopFuture<GRPCStatus>
  func abandonChannel(request: Lnrpc_AbandonChannelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_AbandonChannelResponse>
  func sendPayment(context: StreamingResponseCallContext<Lnrpc_SendResponse>) -> EventLoopFuture<(StreamEvent<Lnrpc_SendRequest>) -> Void>
  func sendPaymentSync(request: Lnrpc_SendRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_SendResponse>
  func sendToRoute(context: StreamingResponseCallContext<Lnrpc_SendResponse>) -> EventLoopFuture<(StreamEvent<Lnrpc_SendToRouteRequest>) -> Void>
  func sendToRouteSync(request: Lnrpc_SendToRouteRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_SendResponse>
  func addInvoice(request: Lnrpc_Invoice, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_AddInvoiceResponse>
  func listInvoices(request: Lnrpc_ListInvoiceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ListInvoiceResponse>
  func lookupInvoice(request: Lnrpc_PaymentHash, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_Invoice>
  func subscribeInvoices(request: Lnrpc_InvoiceSubscription, context: StreamingResponseCallContext<Lnrpc_Invoice>) -> EventLoopFuture<GRPCStatus>
  func decodePayReq(request: Lnrpc_PayReqString, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_PayReq>
  func listPayments(request: Lnrpc_ListPaymentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ListPaymentsResponse>
  func deleteAllPayments(request: Lnrpc_DeleteAllPaymentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_DeleteAllPaymentsResponse>
  func describeGraph(request: Lnrpc_ChannelGraphRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChannelGraph>
  func getChanInfo(request: Lnrpc_ChanInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChannelEdge>
  func getNodeInfo(request: Lnrpc_NodeInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_NodeInfo>
  func queryRoutes(request: Lnrpc_QueryRoutesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_QueryRoutesResponse>
  func getNetworkInfo(request: Lnrpc_NetworkInfoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_NetworkInfo>
  func stopDaemon(request: Lnrpc_StopRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_StopResponse>
  func subscribeChannelGraph(request: Lnrpc_GraphTopologySubscription, context: StreamingResponseCallContext<Lnrpc_GraphTopologyUpdate>) -> EventLoopFuture<GRPCStatus>
  func debugLevel(request: Lnrpc_DebugLevelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_DebugLevelResponse>
  func feeReport(request: Lnrpc_FeeReportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_FeeReportResponse>
  func updateChannelPolicy(request: Lnrpc_PolicyUpdateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_PolicyUpdateResponse>
  func forwardingHistory(request: Lnrpc_ForwardingHistoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ForwardingHistoryResponse>
  func exportChannelBackup(request: Lnrpc_ExportChannelBackupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChannelBackup>
  func exportAllChannelBackups(request: Lnrpc_ChanBackupExportRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_ChanBackupSnapshot>
  func verifyChanBackup(request: Lnrpc_ChanBackupSnapshot, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_VerifyChanBackupResponse>
  func restoreChannelBackups(request: Lnrpc_RestoreChanBackupRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_RestoreBackupResponse>
  func subscribeChannelBackups(request: Lnrpc_ChannelBackupSubscription, context: StreamingResponseCallContext<Lnrpc_ChanBackupSnapshot>) -> EventLoopFuture<GRPCStatus>
  func bakeMacaroon(request: Lnrpc_BakeMacaroonRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Lnrpc_BakeMacaroonResponse>
}

extension Lnrpc_LightningProvider {
  public var serviceName: String { return "lnrpc.Lightning" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "WalletBalance":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.walletBalance(request: request, context: context)
        }
      }

    case "ChannelBalance":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.channelBalance(request: request, context: context)
        }
      }

    case "GetTransactions":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTransactions(request: request, context: context)
        }
      }

    case "EstimateFee":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.estimateFee(request: request, context: context)
        }
      }

    case "SendCoins":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendCoins(request: request, context: context)
        }
      }

    case "ListUnspent":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listUnspent(request: request, context: context)
        }
      }

    case "SubscribeTransactions":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeTransactions(request: request, context: context)
        }
      }

    case "SendMany":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendMany(request: request, context: context)
        }
      }

    case "NewAddress":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.newAddress(request: request, context: context)
        }
      }

    case "SignMessage":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.signMessage(request: request, context: context)
        }
      }

    case "VerifyMessage":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.verifyMessage(request: request, context: context)
        }
      }

    case "ConnectPeer":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.connectPeer(request: request, context: context)
        }
      }

    case "DisconnectPeer":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.disconnectPeer(request: request, context: context)
        }
      }

    case "ListPeers":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listPeers(request: request, context: context)
        }
      }

    case "SubscribePeerEvents":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribePeerEvents(request: request, context: context)
        }
      }

    case "GetInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getInfo(request: request, context: context)
        }
      }

    case "PendingChannels":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.pendingChannels(request: request, context: context)
        }
      }

    case "ListChannels":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listChannels(request: request, context: context)
        }
      }

    case "SubscribeChannelEvents":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeChannelEvents(request: request, context: context)
        }
      }

    case "ClosedChannels":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.closedChannels(request: request, context: context)
        }
      }

    case "OpenChannelSync":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.openChannelSync(request: request, context: context)
        }
      }

    case "OpenChannel":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.openChannel(request: request, context: context)
        }
      }

    case "FundingStateStep":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.fundingStateStep(request: request, context: context)
        }
      }

    case "ChannelAcceptor":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.channelAcceptor(context: context)
      }

    case "CloseChannel":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.closeChannel(request: request, context: context)
        }
      }

    case "AbandonChannel":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.abandonChannel(request: request, context: context)
        }
      }

    case "SendPayment":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.sendPayment(context: context)
      }

    case "SendPaymentSync":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendPaymentSync(request: request, context: context)
        }
      }

    case "SendToRoute":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.sendToRoute(context: context)
      }

    case "SendToRouteSync":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sendToRouteSync(request: request, context: context)
        }
      }

    case "AddInvoice":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addInvoice(request: request, context: context)
        }
      }

    case "ListInvoices":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listInvoices(request: request, context: context)
        }
      }

    case "LookupInvoice":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.lookupInvoice(request: request, context: context)
        }
      }

    case "SubscribeInvoices":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeInvoices(request: request, context: context)
        }
      }

    case "DecodePayReq":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.decodePayReq(request: request, context: context)
        }
      }

    case "ListPayments":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listPayments(request: request, context: context)
        }
      }

    case "DeleteAllPayments":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteAllPayments(request: request, context: context)
        }
      }

    case "DescribeGraph":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.describeGraph(request: request, context: context)
        }
      }

    case "GetChanInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getChanInfo(request: request, context: context)
        }
      }

    case "GetNodeInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNodeInfo(request: request, context: context)
        }
      }

    case "QueryRoutes":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.queryRoutes(request: request, context: context)
        }
      }

    case "GetNetworkInfo":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getNetworkInfo(request: request, context: context)
        }
      }

    case "StopDaemon":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.stopDaemon(request: request, context: context)
        }
      }

    case "SubscribeChannelGraph":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeChannelGraph(request: request, context: context)
        }
      }

    case "DebugLevel":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.debugLevel(request: request, context: context)
        }
      }

    case "FeeReport":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.feeReport(request: request, context: context)
        }
      }

    case "UpdateChannelPolicy":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.updateChannelPolicy(request: request, context: context)
        }
      }

    case "ForwardingHistory":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.forwardingHistory(request: request, context: context)
        }
      }

    case "ExportChannelBackup":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportChannelBackup(request: request, context: context)
        }
      }

    case "ExportAllChannelBackups":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.exportAllChannelBackups(request: request, context: context)
        }
      }

    case "VerifyChanBackup":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.verifyChanBackup(request: request, context: context)
        }
      }

    case "RestoreChannelBackups":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.restoreChannelBackups(request: request, context: context)
        }
      }

    case "SubscribeChannelBackups":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.subscribeChannelBackups(request: request, context: context)
        }
      }

    case "BakeMacaroon":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.bakeMacaroon(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


/// Provides conformance to `GRPCPayload` for the request and response messages
extension Lnrpc_GenSeedRequest: GRPCProtobufPayload {}
extension Lnrpc_GenSeedResponse: GRPCProtobufPayload {}
extension Lnrpc_InitWalletRequest: GRPCProtobufPayload {}
extension Lnrpc_InitWalletResponse: GRPCProtobufPayload {}
extension Lnrpc_UnlockWalletRequest: GRPCProtobufPayload {}
extension Lnrpc_UnlockWalletResponse: GRPCProtobufPayload {}
extension Lnrpc_ChangePasswordRequest: GRPCProtobufPayload {}
extension Lnrpc_ChangePasswordResponse: GRPCProtobufPayload {}

extension Lnrpc_WalletBalanceRequest: GRPCProtobufPayload {}
extension Lnrpc_WalletBalanceResponse: GRPCProtobufPayload {}
extension Lnrpc_ChannelBalanceRequest: GRPCProtobufPayload {}
extension Lnrpc_ChannelBalanceResponse: GRPCProtobufPayload {}
extension Lnrpc_GetTransactionsRequest: GRPCProtobufPayload {}
extension Lnrpc_TransactionDetails: GRPCProtobufPayload {}
extension Lnrpc_EstimateFeeRequest: GRPCProtobufPayload {}
extension Lnrpc_EstimateFeeResponse: GRPCProtobufPayload {}
extension Lnrpc_SendCoinsRequest: GRPCProtobufPayload {}
extension Lnrpc_SendCoinsResponse: GRPCProtobufPayload {}
extension Lnrpc_ListUnspentRequest: GRPCProtobufPayload {}
extension Lnrpc_ListUnspentResponse: GRPCProtobufPayload {}
extension Lnrpc_Transaction: GRPCProtobufPayload {}
extension Lnrpc_SendManyRequest: GRPCProtobufPayload {}
extension Lnrpc_SendManyResponse: GRPCProtobufPayload {}
extension Lnrpc_NewAddressRequest: GRPCProtobufPayload {}
extension Lnrpc_NewAddressResponse: GRPCProtobufPayload {}
extension Lnrpc_SignMessageRequest: GRPCProtobufPayload {}
extension Lnrpc_SignMessageResponse: GRPCProtobufPayload {}
extension Lnrpc_VerifyMessageRequest: GRPCProtobufPayload {}
extension Lnrpc_VerifyMessageResponse: GRPCProtobufPayload {}
extension Lnrpc_ConnectPeerRequest: GRPCProtobufPayload {}
extension Lnrpc_ConnectPeerResponse: GRPCProtobufPayload {}
extension Lnrpc_DisconnectPeerRequest: GRPCProtobufPayload {}
extension Lnrpc_DisconnectPeerResponse: GRPCProtobufPayload {}
extension Lnrpc_ListPeersRequest: GRPCProtobufPayload {}
extension Lnrpc_ListPeersResponse: GRPCProtobufPayload {}
extension Lnrpc_PeerEventSubscription: GRPCProtobufPayload {}
extension Lnrpc_PeerEvent: GRPCProtobufPayload {}
extension Lnrpc_GetInfoRequest: GRPCProtobufPayload {}
extension Lnrpc_GetInfoResponse: GRPCProtobufPayload {}
extension Lnrpc_PendingChannelsRequest: GRPCProtobufPayload {}
extension Lnrpc_PendingChannelsResponse: GRPCProtobufPayload {}
extension Lnrpc_ListChannelsRequest: GRPCProtobufPayload {}
extension Lnrpc_ListChannelsResponse: GRPCProtobufPayload {}
extension Lnrpc_ChannelEventSubscription: GRPCProtobufPayload {}
extension Lnrpc_ChannelEventUpdate: GRPCProtobufPayload {}
extension Lnrpc_ClosedChannelsRequest: GRPCProtobufPayload {}
extension Lnrpc_ClosedChannelsResponse: GRPCProtobufPayload {}
extension Lnrpc_OpenChannelRequest: GRPCProtobufPayload {}
extension Lnrpc_ChannelPoint: GRPCProtobufPayload {}
extension Lnrpc_OpenStatusUpdate: GRPCProtobufPayload {}
extension Lnrpc_FundingTransitionMsg: GRPCProtobufPayload {}
extension Lnrpc_FundingStateStepResp: GRPCProtobufPayload {}
extension Lnrpc_ChannelAcceptResponse: GRPCProtobufPayload {}
extension Lnrpc_ChannelAcceptRequest: GRPCProtobufPayload {}
extension Lnrpc_CloseChannelRequest: GRPCProtobufPayload {}
extension Lnrpc_CloseStatusUpdate: GRPCProtobufPayload {}
extension Lnrpc_AbandonChannelRequest: GRPCProtobufPayload {}
extension Lnrpc_AbandonChannelResponse: GRPCProtobufPayload {}
extension Lnrpc_SendRequest: GRPCProtobufPayload {}
extension Lnrpc_SendResponse: GRPCProtobufPayload {}
extension Lnrpc_SendToRouteRequest: GRPCProtobufPayload {}
extension Lnrpc_Invoice: GRPCProtobufPayload {}
extension Lnrpc_AddInvoiceResponse: GRPCProtobufPayload {}
extension Lnrpc_ListInvoiceRequest: GRPCProtobufPayload {}
extension Lnrpc_ListInvoiceResponse: GRPCProtobufPayload {}
extension Lnrpc_PaymentHash: GRPCProtobufPayload {}
extension Lnrpc_InvoiceSubscription: GRPCProtobufPayload {}
extension Lnrpc_PayReqString: GRPCProtobufPayload {}
extension Lnrpc_PayReq: GRPCProtobufPayload {}
extension Lnrpc_ListPaymentsRequest: GRPCProtobufPayload {}
extension Lnrpc_ListPaymentsResponse: GRPCProtobufPayload {}
extension Lnrpc_DeleteAllPaymentsRequest: GRPCProtobufPayload {}
extension Lnrpc_DeleteAllPaymentsResponse: GRPCProtobufPayload {}
extension Lnrpc_ChannelGraphRequest: GRPCProtobufPayload {}
extension Lnrpc_ChannelGraph: GRPCProtobufPayload {}
extension Lnrpc_ChanInfoRequest: GRPCProtobufPayload {}
extension Lnrpc_ChannelEdge: GRPCProtobufPayload {}
extension Lnrpc_NodeInfoRequest: GRPCProtobufPayload {}
extension Lnrpc_NodeInfo: GRPCProtobufPayload {}
extension Lnrpc_QueryRoutesRequest: GRPCProtobufPayload {}
extension Lnrpc_QueryRoutesResponse: GRPCProtobufPayload {}
extension Lnrpc_NetworkInfoRequest: GRPCProtobufPayload {}
extension Lnrpc_NetworkInfo: GRPCProtobufPayload {}
extension Lnrpc_StopRequest: GRPCProtobufPayload {}
extension Lnrpc_StopResponse: GRPCProtobufPayload {}
extension Lnrpc_GraphTopologySubscription: GRPCProtobufPayload {}
extension Lnrpc_GraphTopologyUpdate: GRPCProtobufPayload {}
extension Lnrpc_DebugLevelRequest: GRPCProtobufPayload {}
extension Lnrpc_DebugLevelResponse: GRPCProtobufPayload {}
extension Lnrpc_FeeReportRequest: GRPCProtobufPayload {}
extension Lnrpc_FeeReportResponse: GRPCProtobufPayload {}
extension Lnrpc_PolicyUpdateRequest: GRPCProtobufPayload {}
extension Lnrpc_PolicyUpdateResponse: GRPCProtobufPayload {}
extension Lnrpc_ForwardingHistoryRequest: GRPCProtobufPayload {}
extension Lnrpc_ForwardingHistoryResponse: GRPCProtobufPayload {}
extension Lnrpc_ExportChannelBackupRequest: GRPCProtobufPayload {}
extension Lnrpc_ChannelBackup: GRPCProtobufPayload {}
extension Lnrpc_ChanBackupExportRequest: GRPCProtobufPayload {}
extension Lnrpc_ChanBackupSnapshot: GRPCProtobufPayload {}
extension Lnrpc_VerifyChanBackupResponse: GRPCProtobufPayload {}
extension Lnrpc_RestoreChanBackupRequest: GRPCProtobufPayload {}
extension Lnrpc_RestoreBackupResponse: GRPCProtobufPayload {}
extension Lnrpc_ChannelBackupSubscription: GRPCProtobufPayload {}
extension Lnrpc_BakeMacaroonRequest: GRPCProtobufPayload {}
extension Lnrpc_BakeMacaroonResponse: GRPCProtobufPayload {}

